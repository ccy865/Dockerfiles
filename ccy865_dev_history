* goal : nvidia docker에서 gpu로 금종수 retina net 돌리기
###########################################################################################
### UBUNTU  
	@ (ubuntu)폴더 삭제(하위폴더포함)하기 : rm -r -f folderName
	@ 에디터
		gedit 설치 명령 : sudo apt-get install gedit gedit-plugins
	@ (ubuntu)폴더 복사할때 : cp -a 폴더이름 
	@ (ubuntu)vim 설치 : apt-get install vim
	@ 우분투 한글 입력(벼룩) 방법
		<참조> http://progtrend.blogspot.com/2018/06/ubuntu-1804-uim.html
	@ 서브라임텍스트3 설치
		wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
	@ apt 업데이트 하기 : apt-get update 
	@ 설치된 패키지 리스트가 나옴 : dpkg -l
	@ 패키지 이름 설치 : sudo apt-get install [패키지이름]
	@ 패키지 이름 찾기 : sudo apt-cache search [패키지이름]

###########################################################################################
### DOCKER  
	@ 도커파일(Dockerfile)을 빌드 명령으로 도커이미지 만드는 법 : docker build -t ccy865/tensor:gpu .
	    이미지 이름과 태그를 달겠다 : -t 
	    이미지 이름 & 태그 : ccy865/tensor:gpu
	    빌드대상 디렉토리는 현재 폴더 : . 

	@ 도커 컨테이너 
		정지 명령 : docker stop 컨테이너ID
		시작 명령 : docker start 컨테이너ID
		Exit 상태 모두 삭제 : docker rm $(docker ps --filter 'status=exited' -a -q)
		생성 명령 : docker run -it -p 8888:8888 -p 6006:6006 -v /home/drivepx/RetinaNet-tensorflow-master:/notebooks/choicy -d ccy865/latest-py3:opencv3
			<설명>터미널 사용을 위함 옵셤 : -it
		    텐서보드 포트 할당 : -p 6006:6006
		    주피터노트북 포트 할당 : -p 8888:8888
		    host와 컨테이너 공유폴더 설정 : -v /home/drivepx/RetinaNet-tensorflow-master:/notebooks/choicy
		    백그라운드에서 런 : -d
		    이미지 이름 : ccy865/latest-py3:opencv3
		복사 명령 : 
			host에서 컨테이너로(HOST에서 실행) : docker cp /home/drivepx/RetinaNet-tensorflow romantic_gauss:/ccy865
			컨테이너에서 HOST로(컨테이너에서 실행) : docker cp romantic_gauss:/ccy865 /home/drivepx/RetinaNet-tensorflow
		실행중인 컨테이너에 들어가기 : docker exec -it ccy865 bash

	@ 도커 이미지 
		강제 삭제 : docker rmi -f ccy865

	@ 도커 컨테이너를 이미지로 만들기 : docker commit -a "ccy865" -m "retina_kjs_run" zen_ellis ccy865/latest-py3:retina_t1
	    -a "ccy865" : 만든사람
	    -m "retina_kjs_run" : 설명
	    zen_ellis : 이미지로 생성 할 컨테이너 이름
	    ccy865/latest-py3:retina_t1 : 생성할 이미지 이름:태그

	@ 도커 로그인 : docker login

	@ 도커 이미지 도커 허브에 올리기 : docker push ccy865/latest-py3:retina_t1
	    ccy865/latest-py3:retina_t1 : 내 도커 주소(ccy865/latest-py3)에 retina_t1 태그로 올리기 

	@ 도커 이미지에 태그 만들기 : docker tag ccy865/latest-py3:retina_t1 ccy865/ccy865/latest-py3:retina_t1
	    ccy865/latest-py3:retina_t1 : 현재이미지:태그 이름
	    ccy865/ccy865/latest-py3:retina_t1 : 바꿀이미지:태그 이름

	$$$ 텐서플로우
	@ pip에 tensorflow 설치하기
	   	cpu버전 : pip install --upgrade --pre tensorflow
	    gpu버전 : pip install --upgrade --pre tensorflow-gpu

	@ 파이썬에서 tensorflow로 사용가능한 하드웨어 확인하는 법
		python
		from tensorflow.python.client import device_lib
		print(device_lib.list_local_devices())

	@ 텐서플로어 공식 깃헙 주소 복사 : git clone https://github.com/tensorflow/models

###########################################################################################
### 버전 or 가능여부 확인
	cuDNN 버전 확인 : cat /usr/include/cudnn.h | grep CUDNN_MAJOR -A 2
		결과 : #define CUDNN_MAJOR 7 #define CUDNN_MINOR 2
	cuda 버전 확인 : nvcc --version 
		결과 : Cuda compilation tools, release 9.0, V9.0.176
	그래픽 드라이버 버전확인 :nvidia-smi 
	우분투 버전확인 : cat /etc/issue
	opencv 버전 확인 : 
		python 
		import cv2
		cv2.__version__

###########################################################################################
### Install protobuf 3.3 on Ubuntu 16.04(메뉴얼 설치)
	# Make sure you grab the latest version
	curl -OL https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zip
	# Unzip 
	unzip protoc-3.3.0-linux-x86_64.zip -d protoc3
	# Move protoc to /usr/local/bin/
	sudo mv protoc3/bin/* /usr/local/bin/
	# Move protoc3/include to /usr/local/include/
	sudo mv protoc3/include/* /usr/local/include/
	# protobuf 설치 후에 comfile
	From models/research/
	protoc object_detection/protos/*.proto --python_out=.
	# 아래 두줄중 한줄 택해서 실행할것(터미널 실행할때 마다 해줘야함)
	# From models/research/ 이동해서
	export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
	export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim:`pwd`/object_detection
	# 자동으로 하고 싶으면! 
	cd 
	vim ~/.bashrc
	# 맨 아랫줄에 내용 추가
	export PYTHONPATH=$PYTHONPATH:~/notebooks/choicy/models/research/:~/notebooks/choicy/models/research/slim:~/notebooks/choicy/models/research/object_detection/
	# 적용(재시작없이)
	source ~/.bashrc

###########################################################################################
### @ kitti데이터셋으로 create_kitti_tf_record.py를 돌려서 tfrecord 만들기
	사전에 준비할 것 : image_2, label_2, kitti_label_map.pbtxt 이 세개
	코드 수정
		From /notebooks/models/research/object_detection/dataset_tools
		vim create_kitti_tf_record.py
		line 67-68 수정 : kitti_label_map.pbtxt 위치 주소 수정 
	아래 명령 실행
	python <your path>/models/research/object_detection/dataset_tools/create_kitti_tf_record.py --data_dir=<your path>/kitti --output_path=<your path>/kitti.record
		실행할 파일 위치 : <your path>/models/research/object_detection/dataset_tools/create_kitti_tf_record.py
		변경할 데이터셋 위치 : --data_dir=<your path>/kitti
		tfrecord 저장 위치 : --output_path=<your path>/kitti.record

###########################################################################################
### @ FDDB 데이터셋으로 create_kitti_tf_record.py를 돌려서 tfrecord 만들기
	FDDB dataset구성 : image(.jpg), label(.anno), label map(.json)
	FDDB data 디렉토리 구조
	data
	`-- face
	    |-- FDDB-folds
	    |-- annotations
	    |-- images
	    |-- originalPics
	    |   |-- 2002
	    |   `-- 2003
	    |-- test
	    |   |-- annotations
	    |   |-- draws
	    |   `-- images
	    |-- tfrecords
	    `-- train
	        |-- annotations
	        `-- images
	kitti dataset구성 : image(.png), label(.txt), label map(.pbtxt)
	kitti data 디렉토리 구조
	kitti
	|-- data_object_image_2
	|   `-- training
	|       `-- image_2
	|-- training
	|   |-- image_2
	|   `-- label_2
	`-- val
	    |-- images
	    `-- labels

	'create_kitti_tf_record.py'로 다른 데이터셋 돌릴 때 주의 사항 : 
		kitti data 디렉토리 구조 사용해야 함
		이미지와 라벨 이름은 숫자로만 구성되어야 함
		'kitti_label_map.pbtxt' 직접 수정 해야 함 
		<이미지와 라벨이름이 숫자가 아닐때 발생하는 에러 내용>
			File "/notebooks/models/research/object_detection/dataset_tools/create_kitti_tf_record.py", line 117, in convert_kitti_to_tfrecords
		    img_num = int(img_name.split('.')[0])
			ValueError: invalid literal for int() with base 10: '2002_07_19_big_img_130'

오후 3:19 2019-01-06
** nvidia docker tensorlow gpu Retinanet RUN!!
	#START#START#START#START#####20190106(벽쪽gpu-pc in control TEAMVIEW11)########################### 
	#START#START#START#START#####20190106(벽쪽gpu-pc in control TEAMVIEW11)########################### 
	#START#START#START#START#####20190106(벽쪽gpu-pc in control TEAMVIEW11)########################### 

	@ 도커 이미지 가져오기 : docker pull nvcr.io/nvidia/tensorflow:18.08-py3
	@ HOST에서 이용가능한 gpu 확인 : lspci | grep -i nvidia
		결과 : 01:00.0 VGA compatible controller: NVIDIA Corporation GM206 [GeForce GTX 960] (rev a1)
	@ nvidia docker가 잘 설치 되었는지 확인 : docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi
		nvidia docker로 수행 : --runtime=nvidia 
		나가면 컨테이너를 바로 삭제 : --rm
		사용할 이미지 : nvidia/cuda 
		gpu 정보 확인 cmd : nvidia-smi
	@ nvidia-docker run 수행 방식 
		nvidia-docker v1 : nvidia-docker 
		nvidia-docker v2 : docker --runtime=nvidia(nvidia-docker도 되긴함)
	@ 도커 활용시 cuda, cudnn 로컬에 설치 필요 여부
		호스트 컴퓨터는 NVIDIA® 드라이버만 필요하므로 Docker는 GPU에서 TensorFlow를 실행하는 가장 쉬운 방법입니다(NVIDIA® CUDA® Toolkit은 필요하지 않습니다).
		출처 : https://www.tensorflow.org/install/docker

	@ 텐서플로우 의존성 라이브러리 설치 : 1) 이나 2)로 설치 할것(나는  2)로 설치함)
		1)	apt-get install protobuf-compiler python-pil python-lxml python-tk
			pip install --user Cython
			pip install --user contextlib2
			pip install --user jupyter
			pip install --user matplotlib
		
		2)	pip install --user Cython
			pip install --user contextlib2
			pip install --user pillow
			pip install --user lxml
			pip install --user jupyter
			pip install --user matplotlib

	@ tensorflow api 복사 : git clone https://github.com/tensorflow/models
	@ coco api 설치
		coco api 복사 : git clone https://github.com/cocodataset/cocoapi.git
		cd cocoapi/PythonAPI
		make
		cp -r pycocotools /workspace/models/research/
		(이 위치로 가서)From tensorflow/models/research/
			protoc object_detection/protos/*.proto --python_out=.
		(에러가 나면) 'Manual protobuf-compiler installation and usage' 해야함 아래 내용
		(이 위치로 가서)From tensorflow/models/research/
			wget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip
			unzip protobuf.zip
			./bin/protoc object_detection/protos/*.proto --python_out=.
			(이 위치에서)From tensorflow/models/research/
			터미널을 새로 열때마다 아래 내용을 수행해야함.
				export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
			설치 테스트
				python object_detection/builders/model_builder_test.py
				결과 : 
				................./usr/local/lib/python3.5/dist-packages/tensorflow/python/util/tf_inspect.py:75: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead
				  return _inspect.getargspec(target)
				.....
				----------------------------------------------------------------------
				Ran 22 tests in 0.065s

				OK
	#END#END#END#END#END####20190106(벽쪽gpu-pc in control TEAMVIEW11)###########################
	#END#END#END#END#END####20190106(벽쪽gpu-pc in control TEAMVIEW11)###########################
	#END#END#END#END#END####20190106(벽쪽gpu-pc in control TEAMVIEW11)###########################

###########################################################################################
### @ 도움받은 사이트
	@ 텐서플로우API 설치
		설치 한글설명 : https://you359.github.io/tensorflow%20models/Tensorflow-Object-Detection-API-Installation/
		설치 원문 : https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md
		protobuf 메뉴얼 설치 : https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md#Manual-protobuf-compiler-installation-and-usage
		opencv 설치 : pip install OpenCV-Python
		설치 확인
			python
			import cv2
			(에러 발생시)아래 수행
			apt update && apt install -y libsm6 libxext6
			(다시 설치 확인 후) 에러나면? 아래 수행
			apt-get install libsm6 libxrender1 libfontconfig1
			이렇게 해서 다시 설치 확인 하고, 에러메시지가 없으면 성공!!!!

	@ opencv설치 : https://nicewoong.github.io/development/2018/01/04/setting-opencv-dev/
	@ import에러 해결 : https://stackoverflow.com/questions/47113029/importerror-libsm-so-6-cannot-open-shared-object-file-no-such-file-or-directo

	@ Dockerfile 만들기
		만드는 이유 : http://blog.naver.com/PostView.nhn?blogId=alice_k106&logNo=220646382977&parentCategoryNo=7&categoryNo=&viewDate=&isShowPopularPosts=true&from=search
		만드는 방법 : https://swalloow.github.io/dockerfile
					http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter04/02

	@ (ubuntu) find, grep 조합 명령어 : find [해당디렉토리] -iname "파일명" | grep -n "찾을문자열"

	@ 텐서플로우 gpu 업그레이드 : pip install --upgrade tensorflow-gpu